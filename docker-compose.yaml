version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16
    container_name: order_management_db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_DATABASE:-orders}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - order_management_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  flywayMigration:
    container_name: flyway-migration
    image: flyway/flyway:latest
    command: -url=jdbc:postgresql://postgres:5432/orders -user=postgres -password=postgres -connectRetries=10 migrate
    volumes:
      - ./migrations:/flyway/sql
    depends_on:
      postgres:
        condition: service_healthy

  # Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: order_management_api
    restart: always
    ports:
      - "${PORT:-3000}:3000"
    networks:
      - order_management_network
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_DATABASE=${DB_DATABASE:-orders}
      - DB_SYNCHRONIZE=${DB_SYNCHRONIZE:-false}
      - DB_LOGGING=${DB_LOGGING:-false}
      - PORT=3000
      - API_PREFIX=${API_PREFIX:-}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
    depends_on:
      postgres:
        condition: service_healthy

networks:
  order_management_network:
    name: order_management_network

volumes:
  postgres_data:
